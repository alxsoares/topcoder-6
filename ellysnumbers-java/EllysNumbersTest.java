import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class EllysNumbersTest {

	protected EllysNumbers solution;

	@Before
	public void setUp() {
		solution = new EllysNumbers();
	}

	@Test(timeout = 2000)
	public void testCase0() {
		long n = 12L;
		String[] special = new String[] { "4 2 5 6 3" };

		long expected = 1L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase1() {
		long n = 42L;
		String[] special = new String[] { "1 2 3 4 5 6 7 13 14 21 42" };

		long expected = 10L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase2() {
		long n = 1337L;
		String[] special = new String[] { "1 13 42 666 2674" };

		long expected = 0L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase3() {
		long n = 1073741824L;
		String[] special = new String[] { "1 2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 1", "6384 32768 65536 131072 262144 524288 1048576 2097",
				"152 4194304 8388608 16777216 33554432 67108864 134", "217728 268435456 536870912" };

		long expected = 0L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase4() {
		long n = 7420738134810L;
		String[] special = new String[] { "435 625199055 4199 33263 17 222870 284870433 72093", "2379 7 11 31 247110827 23 1771 81809 851968487 13 ",
				"476379795 1001 5 435274114 38264554 7429 239906525", " 3 227183706 887045414 606786670 3795 797605175 29", " 30 747186719 19 2 562347843 74 2294 588002688 743",
				"6429 703 591740547 36657492 37 444178205 1002001 2", "17626404" };

		long expected = 110L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase5() {
		long n = 614889782588491410L;
		String[] special = new String[] { "2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 6 10 14 2", "2 26 34 38 46 58 62 74 82 86 94 15 21 33 39 51 57 ",
				"69 87 93 111 123 129 141 35 55 65 85 95 115 145 15", "5 185 205 215 235 77 91 119 133 161 203 217 259 28", "7 301 329 143 187 209 253 319 341 407 451 473 517 ",
				"221 247 299 377 403 481 533 559 611 323 391 493 52", "7 629 697 731 799 437 551 589 703 779 817 893 667 ", "713 851 943 989 1081 899 1073 1189 1247 1363 1147 ",
				"1271 1333 1457 1517 1591 1739 1763 1927 2021 3451 ", "1023 11063 30 6851 3526 1653 12943 50431 10013 140", "53 6355 6479 20683 4551 1054 1615 1235 6293 4807 2",
				"6381 2261 3243 1435 1505 715 2146 12173 665 2233 3", "854 8815 1222 2465 2553 27047 2139 1767 266 82861 ", "1558 2821 10199 32759 23171 2717 16211 9061 9269 3",
				"6613 53621 2829 2665 2795 3553 52 2635 165 1677 80", "29 1595 3515 56129 1015 17501 282 20339 1258 957 1", "045 2193 5863 36859 238 8789 7511 7429 1209 1001 3",
				"289 3335 130 605 5365 4371 3731 2337 22591 29233 4", "433 55883 370 1353 258 1309 10373 7163 5687 1573 8", "06 5735 2185 3157 6235 42 5453 1599 4879 345 13547",
				" 3478 25897 5781 33497 62651 14993 574 20539 1426 ", "33511 18791 8987 1798 2849 4123 2015 22919 946 691", "9 2585 410 21199 8729 17329 27347 6929 182 5117 18",
				"86 10127 602 22661 7337 651 322 9503 15283 17081 1", "034 663 18377 455 23693 1118 222 58867 483 34891 6", "721 4921 1066 1463 20213 399 68 12617 3441 2397 20",
				"7 7267 16813 10105 174 30659 12673 28823 1421 1307", "9 31349 9889 10621 11609 1598 3995 2967 2109 6149 ", "75809 1887 38399 16031 3895 148 2091 10387 16523 7",
				"733 273 442 494 987 1311 1495 645 53909 230 17917 ", "33041 2093 285 3145 5957 16169 506 4773 190 20387 ", "51127 2378 4945 754 903 418 1833 470 2023 71299 12",
				"65 4199 2679 638 3741 5291 9367 22607 725 13243 44", "03 8569 171 66 805 54653 434 13889 28681 1551 1371", "7 1085 2294 33263 102 44321 595 5491 7843 3565 117",
				"3 31117 539 27683 78 22231 518 175 5217 430 3055 5", "719 186 4418 25051 43993 682 39997 646 14147 21793", " 429 117 24679 15463 13949 2365 5289 12121 1479 20",
				"35 12259 2387 8897 124 13981 255 29971 36593 21607", " 986 435 4991 6647 561 49321 11891 3034 14467 3866", "3 19499 555 5423 15457 2914 9361 2697 2639 11137 5",
				"405 4255 8041 1519 1334 34357 68479 6815 1885 9056", "9 2255 25327 962 20 741 2405 425 1083 27869 902 16", "337 2431 4669 1786 1978 44 10571 338 615 406 46483",
				" 1581 775 3219 16027 385 3619 20677 8671 6251 1972", "1 19393 3655 231 3913 507 11687 1645 24769 4495 10", "58 3182 4301 11803 1131 21197 4205 627 12857 29563",
				" 2542 7585 3999 18241" };

		long expected = 180533490L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

	@Test(timeout = 2000)
	public void testCase6() {
		long n = 105;
		String[] special = new String[] { "15 7 21 5 35 3" };

		long expected = 4L;
		long actual = solution.getSubsets(n, special);

		Assert.assertEquals(expected, actual);
	}

}
